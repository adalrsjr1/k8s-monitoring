---
apiVersion: v1
kind: Service
metadata:
  labels: {name: zipkin-mysql}
  name: zipkin-mysql
  namespace: zipkin
spec:
  ports:
  - {nodePort: 30306, port: 3306, targetPort: 3306}
  selector: {name: zipkin-mysql}
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata: {name: front-end, namespace: sock-shop}
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: front-end}
    spec:
      containers:
      - image: weaveworksdemos/front-end
        name: front-end
        ports:
        - {containerPort: 8079}
        securityContext:
          capabilities:
            drop: [all]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: master}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: carts-db}
  name: carts-db
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: carts-db}
    spec:
      containers:
      - image: mongo
        name: carts-db
        ports:
        - {containerPort: 27017, name: mongo}
        securityContext:
          capabilities:
            add: [CHOWN, SETGID, SETUID]
            drop: [all]
          readOnlyRootFilesystem: true
        volumeMounts:
        - {mountPath: /tmp, name: tmp-volume}
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: micro1}
      volumes:
      - emptyDir: {medium: Memory}
        name: tmp-volume
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {kubernetes.io/cluster-service: 'true', kubernetes.io/name: zipkin, name: zipkin}
  name: zipkin
  namespace: zipkin
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: zipkin}
    spec:
      containers:
      - env:
        - {name: STORAGE_TYPE, value: mysql}
        - {name: MYSQL_HOST, value: zipkin-mysql}
        image: openzipkin/zipkin
        name: zipkin
        ports:
        - {containerPort: 9411}
      nodeSelector: {kubernetes.io/hostname: master}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: carts}
  name: carts
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: carts}
    spec:
      containers:
      - env:
        - {name: ZIPKIN, value: zipkin.zipkin.svc.cluster.local}
        - {name: JAVA_OPTS, value: '-Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m
            -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom'}
        image: weaveworksdemos/carts
        name: carts
        ports:
        - {containerPort: 80}
        securityContext:
          capabilities:
            add: [NET_BIND_SERVICE]
            drop: [all]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
        volumeMounts:
        - {mountPath: /tmp, name: tmp-volume}
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: micro2}
      volumes:
      - emptyDir: {medium: Memory}
        name: tmp-volume
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: user}
  name: user
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: user}
    spec:
      containers:
      - env:
        - {name: ZIPKIN, value: 'http://zipkin.zipkin.svc.cluster.local:9411/api/v1/spans'}
        - {name: MONGO_HOST, value: 'user-db:27017'}
        image: gfads/user:10b11fe9
        name: user
        ports:
        - {containerPort: 80}
        securityContext:
          capabilities:
            add: [NET_BIND_SERVICE]
            drop: [all]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: micro10}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: rabbitmq}
  name: rabbitmq
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: rabbitmq}
    spec:
      containers:
      - image: rabbitmq:3.6.8-alpine
        name: rabbitmq
        ports:
        - {containerPort: 5672}
        securityContext:
          capabilities:
            add: [CHOWN, SETGID, SETUID, DAC_OVERRIDE]
            drop: [all]
          readOnlyRootFilesystem: false
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: master}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: payment}
  name: payment
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: payment}
    spec:
      containers:
      - env:
        - {name: ZIPKIN, value: 'http://zipkin.zipkin.svc.cluster.local:9411/api/v1/spans'}
        image: gfads/payment:a440cf61
        name: payment
        ports:
        - {containerPort: 80}
        securityContext:
          capabilities:
            add: [NET_BIND_SERVICE]
            drop: [all]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: micro7}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: queue-master}
  name: queue-master
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: queue-master}
    spec:
      containers:
      - image: weaveworksdemos/queue-master
        name: queue-master
        ports:
        - {containerPort: 80}
        volumeMounts:
        - {mountPath: /var/run/docker.sock, name: docker-sock}
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: master}
      volumes:
      - hostPath: {path: /var/run/docker.sock}
        name: docker-sock
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: catalogue}
  name: catalogue
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: catalogue}
    spec:
      containers:
      - env:
        - {name: ZIPKIN, value: 'http://zipkin.zipkin.svc.cluster.local:9411/api/v1/spans'}
        image: gfads/catalogue:5a476e87
        name: catalogue
        ports:
        - {containerPort: 80}
        securityContext:
          capabilities:
            add: [NET_BIND_SERVICE]
            drop: [all]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: micro4}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: shipping}
  name: shipping
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: shipping}
    spec:
      containers:
      - env:
        - {name: ZIPKIN, value: zipkin.zipkin.svc.cluster.local}
        - {name: JAVA_OPTS, value: '-Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m
            -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom'}
        image: weaveworksdemos/shipping
        name: shipping
        ports:
        - {containerPort: 80}
        securityContext:
          capabilities:
            add: [NET_BIND_SERVICE]
            drop: [all]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
        volumeMounts:
        - {mountPath: /tmp, name: tmp-volume}
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: micro8}
      volumes:
      - emptyDir: {medium: Memory}
        name: tmp-volume
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: zipkin-cron}
  name: zipkin-cron
  namespace: zipkin
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: zipkin-cron}
    spec:
      containers:
      - args: [-f]
        command: [crond]
        env:
        - {name: STORAGE_TYPE, value: mysql}
        - {name: MYSQL_HOST, value: zipkin-mysql}
        - {name: MYSQL_USER, value: zipkin}
        - {name: MYSQL_PASS, value: zipkin}
        image: openzipkin/zipkin-dependencies:1.4.0
        name: zipkin-cron
      nodeSelector: {kubernetes.io/hostname: master}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: orders-db}
  name: orders-db
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: orders-db}
    spec:
      containers:
      - image: mongo
        name: orders-db
        ports:
        - {containerPort: 27017, name: mongo}
        securityContext:
          capabilities:
            add: [CHOWN, SETGID, SETUID]
            drop: [all]
          readOnlyRootFilesystem: true
        volumeMounts:
        - {mountPath: /tmp, name: tmp-volume}
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: micro5}
      volumes:
      - emptyDir: {medium: Memory}
        name: tmp-volume
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: zipkin-mysql}
  name: zipkin-mysql
  namespace: zipkin
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: zipkin-mysql}
    spec:
      containers:
      - image: openzipkin/zipkin-mysql:1.20.0
        name: zipkin-mysql
        ports:
        - {containerPort: 3306, name: mysql}
      nodeSelector: {kubernetes.io/hostname: master}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: orders}
  name: orders
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: orders}
    spec:
      containers:
      - env:
        - {name: ZIPKIN, value: zipkin.zipkin.svc.cluster.local}
        - {name: JAVA_OPTS, value: '-Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m
            -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom'}
        image: weaveworksdemos/orders
        name: orders
        ports:
        - {containerPort: 80}
        securityContext:
          capabilities:
            add: [NET_BIND_SERVICE]
            drop: [all]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
        volumeMounts:
        - {mountPath: /tmp, name: tmp-volume}
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: micro6}
      volumes:
      - emptyDir: {medium: Memory}
        name: tmp-volume
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: catalogue-db}
  name: catalogue-db
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: catalogue-db}
    spec:
      containers:
      - env:
        - {name: MYSQL_ROOT_PASSWORD, value: fake_password}
        - {name: MYSQL_DATABASE, value: socksdb}
        image: weaveworksdemos/catalogue-db
        name: catalogue-db
        ports:
        - {containerPort: 3306, name: mysql}
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: micro3}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels: {name: user-db}
  name: user-db
  namespace: sock-shop
spec:
  replicas: 1
  template:
    metadata:
      labels: {name: user-db}
    spec:
      containers:
      - image: weaveworksdemos/user-db
        name: user-db
        ports:
        - {containerPort: 27017, name: mongo}
        securityContext:
          capabilities:
            add: [CHOWN, SETGID, SETUID]
            drop: [all]
          readOnlyRootFilesystem: true
        volumeMounts:
        - {mountPath: /tmp, name: tmp-volume}
      nodeSelector: {beta.kubernetes.io/os: linux, kubernetes.io/hostname: micro9}
      volumes:
      - emptyDir: {medium: Memory}
        name: tmp-volume
---
